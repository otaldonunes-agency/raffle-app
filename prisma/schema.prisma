//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

enum CurrencyType {
  BRL
  USD
}

enum UserRole {
  USER
  ADMIN
}

enum RaffleDrawType {
  INTERNAL
  LOTERIA_FEDERAL
}

enum RaffleMaxTickets {
  VINTEECINCO
  CINQUENTA
  CEM
  DUZENTOS
  TREZENTOS
  QUATROCENTOS
  QUINHENTOS
  SEISCENTOS
  SETECENTOS
  OITOCENTOS
  NOVECENTOS
  UM_K
  DOIS_K
  TRES_K
  QUATRO_K
  CINCO_K
  SEIS_K
  DEZ_K
  VINTE_K
  TRINTA_K
  CINQUENTA_K
  CEM_K
  QUINHENTOS_K
  UM_KK
  UM_KK_E_QUINHENTOS_K
  DEZ_KK
}

enum RaffleStatus {
  PENDING
  PUBLISHED
  FINISHED
}

enum TicketStatus {
  PENDING
  VALID
  CANCELED
  REFUNDED
  USED
}

/// @@allow('all', auth().role == 'ADMIN')
/// @@allow('create', true)
/// @@allow('read, update, delete', auth() == this)
model User {
  id             String           @id() @default(nanoid())
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt() @map("updated_at")
  deletedAt      DateTime?        @map("deleted_at")
  /// @email
  /// @lower
  /// @trim
  email          String?          @unique()
  emailVerified  DateTime?        @map("email_verified")
  /// @password
  /// @length(min: 8, max: 32)
  /// @trim
  /// @omit
  password       String
  /// @trim
  documentNumber String           @unique() @map("document_number")
  /// @trim
  phoneNumber    String           @unique() @map("phone_number")
  /// @deny('update', auth().role == 'USER')
  role           UserRole         @default(USER)
  /// @gt(0)
  /// @lte(120)
  age            Int
  /// @trim
  firstName      String           @map("first_name")
  /// @trim
  lastName       String?          @map("last_name")
  /// @url
  /// @lower
  /// @trim
  imageUrl       String           @map("image_url")
  termsAccepted  Boolean          @default(false) @map("terms_accepted")
  marketingOptIn Boolean          @default(false) @map("marketing_opt_in")
  /// @deny('update', auth().role == 'USER')
  disabledAt     DateTime?        @map("disabled_at")
  bannedAt       DateTime?        @map("banned_at")
  lastLogin      DateTime?        @map("last_login")
  accounts       Account[]
  /// @omit
  auditLogs      AuditLog[]
  rafflesCreated Raffle[]
  rafflesWon     WinnerOnRaffle[]
  sessions       Session[]
  tickets        Ticket[]

  @@map("users")
}

/// @@allow('all', auth().role == 'ADMIN')
model Account {
  id                       String    @id() @default(nanoid())
  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime  @updatedAt() @map("updated_at")
  deletedAt                DateTime? @map("deleted_at")
  userId                   String    @map("user_id")
  access_token             String?
  expires_at               Int?
  id_token                 String?
  provider                 String
  providerAccountId        String    @map("provider_account_id")
  refresh_token            String?
  refresh_token_expires_in Int?
  scope                    String?
  session_state            String?
  token_type               String?
  type                     String
  user                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

/// @@allow('all', auth().role == 'ADMIN')
model Session {
  id           String    @id() @default(nanoid())
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt() @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  userId       String    @map("user_id")
  expires      DateTime
  ipAddress    String?   @map("ip_address")
  sessionToken String    @unique() @map("session_token")
  userAgent    String?   @map("user_agent")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

/// @@allow('all', auth().role == 'ADMIN')
model VerificationToken {
  id         String    @id() @default(nanoid())
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt() @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")
  identifier String
  expires    DateTime
  token      String    @unique()

  @@unique([identifier, token])
  @@map("verification_tokens")
}

/// @@allow('all', auth().role == 'ADMIN')
model AuditLog {
  id        String    @id() @default(nanoid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt() @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  userId    String    @map("user_id")
  action    String
  details   String?
  ipAddress String?   @map("ip_address")
  user      User      @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

/// @@allow('all', auth().role == 'ADMIN')
/// @@deny('update', future().creator != creator)
/// @@allow('all', creator == auth())
/// @@allow('read', status == 'PUBLISHED')
/// @@allow('create', auth() != null)
model Raffle {
  id              String           @id() @default(nanoid())
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt() @map("updated_at")
  deletedAt       DateTime?        @map("deleted_at")
  creatorId       String           @map("creator_id")
  /// @trim
  name            String
  /// @trim
  description     String           @db.Text()
  /// @url
  /// @lower
  /// @trim
  imageUrl        String           @map("image_url")
  status          RaffleStatus     @default(PENDING)
  currency        CurrencyType     @default(BRL)
  /// @gt(0)
  /// @lte(999999)
  ticketPrice     Decimal          @map("ticket_price")
  drawDate        DateTime         @map("draw_date")
  drawEndDate     DateTime?        @map("draw_end_date")
  drawType        RaffleDrawType   @default(INTERNAL) @map("draw_type")
  maxTickets      RaffleMaxTickets @default(VINTEECINCO) @map("max_tickets")
  isCharity       Boolean          @default(false) @map("is_charity")
  /// @trim
  charityInfo     String?          @map("charity_info")
  /// @trim
  termsConditions String           @map("terms_conditions") @db.Text()
  prizes          Prize[]
  tickets         Ticket[]
  winners         WinnerOnRaffle[]
  creator         User             @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([status, drawDate])
  @@map("raffles")
}

/// @@allow('all', auth().role == 'ADMIN')
/// @@allow('read', true)
/// @@allow('all', auth() == raffle.creator)
/// @@deny('update', future().raffle != raffle)
model Prize {
  id          String           @id() @default(nanoid())
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt() @map("updated_at")
  deletedAt   DateTime?        @map("deleted_at")
  raffleId    String           @map("raffle_id")
  /// @trim
  name        String
  /// @trim
  description String           @db.Text()
  /// @url
  /// @lower
  /// @trim
  imageUrl    String?          @map("image_url")
  quantity    Int              @default(1)
  /// @gt(0)
  /// @lte(999999)
  value       Decimal
  winners     WinnerOnRaffle[]
  raffle      Raffle           @relation(fields: [raffleId], references: [id])

  @@map("prizes")
}

/// @@allow('all', auth().role == 'ADMIN')
/// @@allow('read', auth() == owner)
model Ticket {
  id        String       @id() @default(nanoid())
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt() @map("updated_at")
  deletedAt DateTime?    @map("deleted_at")
  raffleId  String       @map("raffle_id")
  ownerId   String       @map("owner_id")
  status    TicketStatus @default(PENDING)
  number    Int?
  /// @omit
  paymentId String?      @unique() @map("payment_id")
  owner     User         @relation(fields: [ownerId], references: [id])
  raffle    Raffle       @relation(fields: [raffleId], references: [id])

  @@unique([raffleId, number])
  @@index([status, raffleId])
  @@map("tickets")
}

/// @@allow('all', auth().role == 'ADMIN')
/// @@allow('read', true)
model WinnerOnRaffle {
  id        String    @id() @default(nanoid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt() @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  prizeId   String    @map("prize_id")
  raffleId  String    @map("raffle_id")
  winnerId  String    @map("winner_id")
  claimedAt DateTime? @map("claimed_at")
  prize     Prize     @relation(fields: [prizeId], references: [id])
  raffle    Raffle    @relation(fields: [raffleId], references: [id])
  winner    User      @relation(fields: [winnerId], references: [id])

  @@unique([raffleId, winnerId, prizeId])
  @@map("winners_on_raffle")
}
